# NaN_01_4stacked_f435w_drc_cutout_53.180598_-27.781823_512-x-512_cut.fits

import numpy as np
from astropy.io import fits
import matplotlib.pyplot as plt

def stretch_log(image_data, data_min, data_max, a):
    normalized_data = (image_data - data_min) / (data_max - data_min)
    stretched_data = np.log(a * normalized_data + 1) / np.log(a)
    return stretched_data

def stretch_arcsinh(image_data, data_min, data_max, a):
    normalized_data = (image_data - data_min) / (data_max - data_min)
    stretched_data = np.arcsinh(a * normalized_data) / np.arcsinh(a)
    return stretched_data

def stretch_power(image_data, data_min, data_max, a):
    normalized_data = (image_data - data_min) / (data_max - data_min)
    stretched_data = np.power(normalized_data, 1/a)
    return stretched_data

def stretch_sigmoid(image_data, data_min, data_max, a):
    normalized_data = (image_data - data_min) / (data_max - data_min)
    stretched_data = np.abs(2 * (1 / (1 + np.exp(a * normalized_data)) - 1/2))
    return stretched_data

def display_stretched_images(fits_file_path):
    # Load FITS file
    hdul = fits.open(fits_file_path)
    image_data = hdul[1].data

    # Exclude NaN values from the image data
    non_nan_values = image_data[~np.isnan(image_data)]

    # Find the minimum and maximum values excluding NaN
    data_min = np.nanmin(non_nan_values)
    data_max = np.nanmax(non_nan_values)

    # Create subplots for each stretching function
    fig, axs = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('Different Stretching Functions with Varying "a" Values')

    # Stretching using log function
    a_value_log = 10.0
    stretched_data1 = stretch_log(image_data, data_min, data_max, a_value_log)
    axs[0, 0].imshow(stretched_data1, cmap='gray', origin='lower')
    axs[0, 0].set_title(f'Log Stretching (a = {a_value_log})')
    axs[0, 0].axis('off')
    cbar1 = plt.colorbar(axs[0, 0].imshow(stretched_data1, cmap='gray', origin='lower'), ax=axs[0, 0])
    cbar1.set_label('Intensity')

    # Stretching using arcsinh function
    a_value_arcsinh = 10.0
    stretched_data2 = stretch_arcsinh(image_data, data_min, data_max, a_value_arcsinh)
    axs[0, 1].imshow(stretched_data2, cmap='gray', origin='lower')
    axs[0, 1].set_title(f'Arcsinh Stretching (a = {a_value_arcsinh})')
    axs[0, 1].axis('off')
    cbar2 = plt.colorbar(axs[0, 1].imshow(stretched_data2, cmap='gray', origin='lower'), ax=axs[0, 1])
    cbar2.set_label('Intensity')

    # Stretching using power function
    a_value_power = 2.5
    stretched_data3 = stretch_power(image_data, data_min, data_max, a_value_power)
    axs[1, 0].imshow(stretched_data3, cmap='gray', origin='lower')
    axs[1, 0].set_title(f'Power Stretching (a = {a_value_power})')
    axs[1, 0].axis('off')
    cbar3 = plt.colorbar(axs[1, 0].imshow(stretched_data3, cmap='gray', origin='lower'), ax=axs[1, 0])
    cbar3.set_label('Intensity')

    # Stretching using sigmoid function
    a_value_sigmoid = 5.0
    stretched_data4 = stretch_sigmoid(image_data, data_min, data_max, a_value_sigmoid)
    axs[1, 1].imshow(stretched_data4, cmap='gray', origin='lower')
    axs[1, 1].set_title(f'Sigmoid Stretching (a = {a_value_sigmoid})')
    axs[1, 1].axis('off')
    cbar4 = plt.colorbar(axs[1, 1].imshow(stretched_data4, cmap='gray', origin='lower'), ax=axs[1, 1])
    cbar4.set_label('Intensity')

    plt.show()

    # Close the FITS file
    hdul.close()

# Example usage
fits_file_path = 'NaN_01_4stacked_f435w_drc_cutout_53.180598_-27.781823_512-x-512_cut.fits'
display_stretched_images(fits_file_path)
